Webpack: es un paquete de módulos estáticos para aplicaciones de JS modernas

Loader: Te permite hacer un bundle de cualquier recurso estático más allá de JavaScript. Babel(transpilador) se usa como loader.

Plugins: Extienden recursos para añadir configuraciones y particularidades de recursos externos.

Webpack construye un gráfico de dependencias que mapea cada módulo para convertirlo en uno o más módulos

Desde webpack 4 ya no dependemos de tener un archivo de configuración, pero si debemos tener un punto de entrada
Tambien tendremos que tener un punto de salida

En este punto se creará nuestro proyecto una vez esté preparado
Normalmente es la carpeta dist ⇒ Distribution
Tambien contamos con diferentes modos
Modo de desarrollo
Modo de producción
Modos de performance
Donde tu añades
Configuraciones de minificación
Donde se va enviar
Carpeta de destino
Modos de desarrollo local
Donde puedes
Crear puertos específicos para tu proyecto
Ver cambios en tiempo real
Dispone de loader y plugins permitiéndonos preparar particularidades de nuestro proyecto

Comando iniciales:
	npm init -y
	npm i webpack -D
	webpack-cli --save-dev (igual a -D)

	npx webpack => Webpack lee el proyecto e identifica todos los archivos js (se lo ve en consola) y crea la carpeta dist con el archivo main.js. Alli se encuentra nuestro codigo fuente optimizado (elimina codigo redundante). 

	Además, el comando nos arrojo un error: "mode' option has not been set" y lo solucionamos con:
	npx webpack --mode development => Activamos modo desarrollo. Con ello cambia el archivo main.js siendo de utilidad para debuggear (ya que tiene mas información).

	npx webpack --mode production => Hacemos el build pero main.js vuelve a su estado original (mimificado) - sin informacion adicional.

Creamos webpack.config.js => Trabajamos aqui todas las configuraciones necesarias para nuestro proyecto. Luego:
npx webpack --mode production --config webpack.config.js => Para compliar con las configuraciones elegidas.

Ahora creamos nuestro scrip /webpack --mode production/ en packeage.json:
...
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "webpack --mode production"
  },
...
npm run build.

BABEL:  
	babel-loader 					
	@babel/core 
	
	Los agregamos en .babelrc y lo exportamos a webpack.config module 
	@babel/preset-env               	Para trabajar con js moderno
	@babel/plugin-transform-runtime 	Para peticiones async/await

 Añadimos configuración y reglas para trabajar con webpack. =>
 ...
  module: {
    rules: [
      {
        // Lee los archivos con extension .js e ignora node_modules
        test: /\.m?js$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
        },
      },
    ],
  },
  ...
  Corremos npm run build y vemos como ahora en dist/main.js el archivo ha cambiado.

Ahora instalamos html-webpack-plugin y lo configuramos en webpack:
...
plugins: [
    new HtmlWebpackPlugin({
        inject: true,
        // Inyecta el bundle al template HTML
        template: "./public/index.html",
        // Nombre final del archivo
        filename: "./index.html"
    })
  ]
...
Y modificamos el public/index.html: Para que webpack una vez preparado "main.js" lo inserte en el dist/index.html (mimificado por estar en modo de produccion), podemos leerlo mejor corriendo "webpack --mode development" en consola.

`
En alto nivel, los LOADERS poseen 2 configuraciones principales:
	test - propiedad que identifica cuáles archivos deberán ser transformados (expReg)
	use  - propiedad que identifica el loader que será usado para transformar a dichos archivos

PLUGINS
Mientras los loaders transforman ciertos tipos de módulos, los plugins son utilizados para extender tareas específicas, como la optimización de paquetes, la gestión de activos y la inyección de variables de entorno.

Una vez importado el plugin, podemos desear el personalizarlos a través de opciones.
`

CSS y preprocesadores:
npm i 
	mini-css-extract-plugin  	Para extender tareas especificas de css.
	css-loader 					Para que webpack pueda entender css (utilizando modulos validos para wpack).
	-D

npm i stylus stylus-loader -D
Luego configuramos el loader y plugin en webpack.config con las herramientas css mencionadas.

